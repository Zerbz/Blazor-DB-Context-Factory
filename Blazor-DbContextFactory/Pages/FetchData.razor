@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Blazor_DbContextFactory.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick=InsertForecast>Add new forecast</button>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>   
                    <td><button @onclick="() => DeleteForecast(forecast)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync();
    }

    private async Task InsertForecast()
    {   
        var forecast = new WeatherForecast();
        forecast.Date = DateTime.Today;
        forecast.TemperatureC = 25;
        forecast.TemperatureF = 77;
        forecast.Summary = "Perfect";

        forecasts.Add(forecast);
        await ForecastService.InsertForecastAsync(forecast);
    }

    private async Task DeleteForecast(WeatherForecast forecast)
    {
        forecasts.Remove(forecast);
        await ForecastService.DeleteForecastAsync(forecast);
    }

  }





